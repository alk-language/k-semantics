sign2xTriArea(A, B, C) {
  d1 = B.y * A.x + C.y * B.x + A.y * C.x;
  d2 = C.x * B.y + B.x * A.y + A.x * C.y;
  return d1 - d2;
}

ccw(A, B, C) 
/*
  turn left = +1;
  turn right = -1;
  colinear = 0;
*/
{
  ax2 = sign2xTriArea(A, B, C);
  if (ax2 > 0.0) return 1;
  if (ax2 < 0.0) return -1;
  return 0;
}

/*
  tests if C is between A and B
*/
between(A, B, C) {
  if (ccw(A, B, C) != 0) return false;
  if (A.x != B.x)
    return (A.x <= C.x && C.x <= B.x) ||
           (B.x <= C.x && C.x <= A.x);
  else
    return (A.y <= C.y && C.y <= B.y) ||
           (B.y <= C.y && C.y <= A.y);
}  

/*
  proper intersection between the segments AB and CD
*/
isPropIntSeg(A, B , C, D) {
  if (ccw(A, B, C) == 0 ||
      ccw(A, B, D) == 0 ||
      ccw(C, D, A) == 0 ||
      ccw(C, D, B) == 0 )
    return false;
  else
    return (ccw(A, B, C) == 1 xor ccw(A, B, D) == 1) &&
           (ccw(C, D, A) == 1 xor ccw(C, D, B) == 1);
}

isIntSeg(A, B , C, D) {
  if (isPropIntSeg(A, B , C, D)) 
    return true;
  else if (between(A, B, C) ||
      between(A, B, D) ||
      between(C, D, A) ||
      between(C, D, B))
    return true;
  else
    return false;
}


/*
  tests if AB is a internal or external diagonal of the poligon L,
  where A = *a, B = *b, and a, b are iterators associated to L
*/
isDiagKind(a, b, L) {
  A = *a;  B = *b;
  for (p = L.first(); p != L.end(); ++ p) {
    q = p +% 1;
    if (( *p  == A && *q == B) ||
        ( *p  == B && *q == A))
      return false;
    if ( *p != A && *p != B &&
         *q != A && *q != B &&
         isIntSeg(A, B, *p, *q))
      return false;
  }
  return true;
} 

/*
  tests if A is interior to the cone defined by the vertex *p of the poligon L
  (p is a iterator associated to L)
*/
inCone(p, A) {
  P = *p;
  Pprev = *(p -% 1);
  Pnext = *(p +% 1);
  if (ccw(P, Pnext, Pprev) == 1) // P is a convex vertex
    return ccw(P, A, Pprev) + ccw(A, P, Pnext) == 2;
  else // P is a concav (reflex) vertex
    return ccw(P, A, Pnext) + ccw(A, P, Pprev) <= 0;
}

/*
  tests if AB is a diagonal in L, where A = *a, B = *b
*/

isDiag(a, b, L) {
  return isDiagKind(a, b, L) &&
         inCone(a, *b) &&
         inCone(b, *a);
}



A1 = {x -> 1.0 y -> 1.0};
A2 = {x -> 2.0 y -> 2.0};
A3 = {x -> 3.0 y -> 1.0};
A4 = {x -> 4.0 y -> 2.0};
A5 = {x -> 5.0 y -> 1.0};
A6 = {x -> 5.0 y -> 4.0};
A7 = {x -> 3.0 y -> 5.0};
A8 = {x -> 1.0 y -> 4.0};

L = emptyList;
L.pushBack(A1);
L.pushBack(A2);
L.pushBack(A3);
L.pushBack(A4);
L.pushBack(A5);
L.pushBack(A6);
L.pushBack(A7);
L.pushBack(A8);

p0 = L.first();

b02 = isDiag(p0, p0+2, L);
b03 = isDiag(p0, p0+3, L);
b04 = isDiag(p0, p0+4, L);
b05 = isDiag(p0, p0+5, L);
b06 = isDiag(p0, p0+6, L);
b13 = isDiag(p0+1, p0+3, L);
b14 = isDiag(p0+1, p0+4, L);
b15 = isDiag(p0+1, p0+5, L);
b16 = isDiag(p0+1, p0+6, L);
b17 = isDiag(p0+1, p0+7, L);

t1 = isDiagKind(p0, p0+5, L);
t2 = inCone(p0, *(p0+5));
t3 = inCone(p0+5, *p0);

