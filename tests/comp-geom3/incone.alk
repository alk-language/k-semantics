sign2xTriArea(A, B, C) {
  d1 = B.y * A.x + C.y * B.x + A.y * C.x;
  d2 = C.x * B.y + B.x * A.y + A.x * C.y;
  return d1 - d2;
}

ccw(A, B, C) 
/*
  turn left = +1;
  turn right = -1;
  colinear = 0;
*/
{
  ax2 = sign2xTriArea(A, B, C);
  if (ax2 > 0.0) return 1;
  if (ax2 < 0.0) return -1;
  return 0;
}


/*
  tests if A is interior to the cone defined by the vertex *p of the poligon L
  (p is a iterator associated to L)
*/
inCone(p, A) {
  P = *p;
  Pprev = *(p -% 1);
  Pnext = *(p +% 1);
  if (ccw(P, Pnext, Pprev) == 1) // P is a convex vertex
    return ccw(P, A, Pprev) + ccw(A, P, Pnext) == 2;
  else // P is a concav (reflex) vertex
    return ccw(P, A, Pnext) + ccw(A, P, Pprev) != 0;
}

test(out t) {
  A[0] = {x -> 1.0 y -> 1.0};
  A[1] = {x -> 2.0 y -> 2.0};
  A[2] = {x -> 3.0 y -> 1.0};
  A[3] = {x -> 4.0 y -> 2.0};
  A[4] = {x -> 5.0 y -> 1.0};
  A[5] = {x -> 5.0 y -> 4.0};
  A[6] = {x -> 3.0 y -> 5.0};
  A[7] = {x -> 1.0 y -> 4.0};
  L = emptyList;
  for (i = 0; i < A.size(); ++i)
    L.pushBack(A[i]);

  p = L.first();
  p = p + 1;  // *p is A[1]
  B1 = {x -> 2.0 y -> 0.0};
  t[0] = inCone(p, A[6]);
  t[1] = inCone(p, A[7]);
  t[2] = inCone(p, B1);

  p = p + 1; // *p is A[2]
  t[3] = inCone(p, A[4]);
  t[4] = inCone(p, A[5]);
  t[4] = inCone(p, A[6]);
}

t = [];
test(t);



