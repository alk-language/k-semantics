sign2xTriArea(A, B, C) {
  d1 = B.y * A.x + C.y * B.x + A.y * C.x;
  d2 = C.x * B.y + B.x * A.y + A.x * C.y;
  return d1 - d2;
}

ccw(A, B, C) 
/*
  turn left = +1;
  turn right = -1;
  colinear = 0;
*/
{
  ax2 = sign2xTriArea(A, B, C);
  if (ax2 > 0.0) return 1;
  if (ax2 < 0.0) return -1;
  return 0;
}

/*
  tests if C is between A and B
*/
between(A, B, C) {
  if (ccw(A, B, C) != 0) return false;
  if (A.x != B.x)
    return (A.x <= C.x && C.x <= B.x) ||
           (B.x <= C.x && C.x <= A.x);
  else
    return (A.y <= C.y && C.y <= B.y) ||
           (B.y <= C.y && C.y <= A.y);
}  

/*
  proper intersection between the segments AB and CD
*/
isPropIntSeg(A, B , C, D) {
  if (ccw(A, B, C) == 0 ||
      ccw(A, B, D) == 0 ||
      ccw(C, D, A) == 0 ||
      ccw(C, D, B) == 0 )
    return false;
  else
    return (ccw(A, B, C) == 1 xor ccw(A, B, D) == 1) &&
           (ccw(C, D, A) == 1 xor ccw(C, D, B) == 1);
}

/*
  intersection between the segments AB and CD
*/
isIntSeg(A, B , C, D) {
  if (isPropIntSeg(A, B , C, D)) 
    return true;
  else if (between(A, B, C) ||
      between(A, B, D) ||
      between(C, D, A) ||
      between(C, D, B))
    return true;
  else
    return false;
}
    
A1 = {x -> 1.0 y -> 1.0};
B1 = {x -> 3.0 y -> 3.0};
C1 = {x -> 4.0 y -> 4.0};
D1 = {x -> 3.0 y -> 1.0};
b1 = isIntSeg(A1, B1, C1, D1);

C2 = {x -> 2.0 y -> 2.0};
b2 = isIntSeg(A1, B1, C2, D1);
